name: BRS Test Suite

on:
  # schedule:
  #   - cron: "0 14 * * 1"   # Run every Monday at 2:00 PM UTC  # ⛔ Disabled scheduled run
  # push:
  #   branches: ["master"]
  # pull_request:
  #   branches: ["master"]
  workflow_dispatch:
    inputs:
      Environment:
        description: "Which environment will be executed"
        required: true
        type: choice
        default: prod
        options: ["staging", "prod"]
      tags:
        description: "Test tag to run (without @)"
        required: false
        type: string

jobs:
  test:
    runs-on: windows-latest
    env:
      TEST_ENV: ${{ github.event.inputs.Environment || 'prod' }}
      # SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}   # ⛔ Slack disabled
      # SLACK_CHANNEL_ID: "CGJFM3XCM"
      # FAILURE_SLACK_CHANNEL_ID: "CGJFM3XCM"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      # - name: Check Slack configuration
      #   shell: pwsh
      #   run: |
      #     npm install
      #     Write-Host "Checking Slack token availability..."
      #     if ([string]::IsNullOrEmpty($env:SLACK_TOKEN)) {
      #       Write-Host "::error::SLACK_TOKEN environment variable is not set. Please check your GitHub secrets."
      #       exit 1
      #     }
      #     Write-Host "✅ Slack token is configured"
      #   env:
      #     SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
      #     GITHUB_ACTIONS: "true"

      # - name: Send initial Slack notification
      #   id: slack-initial
      #   shell: pwsh
      #   run: |
      #     npm install
      #     $githubActor = "${{ github.actor }}"
      #     $environment = "${{ env.TEST_ENV }}"
      #     $buildName = "BRS Tests"
      #     $output = node helpers/sendInitialSlackMessage.js "$githubActor" "$environment" "$buildName"
      #     $threadTs = ($output | Select-String -Pattern "thread_ts=(.*)" | ForEach-Object { $_.Matches.Groups[1].Value })
      #     if ([string]::IsNullOrEmpty($threadTs)) {
      #       Write-Host "::warning::Could not extract thread_ts. Using default."
      #       $threadTs = "0"
      #     }
      #     echo "thread_ts=$threadTs" >> $env:GITHUB_OUTPUT
      #   env:
      #     SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
      #     SLACK_CHANNEL_ID: "CGJFM3XCM"
      #     GITHUB_ACTIONS: "true"

      - name: Debug - Environment Variables
        shell: pwsh
        run: |
          echo "Selected Environment: $env:TEST_ENV"

      - name: Install dependencies
        shell: pwsh
        run: |
          if (-not (Test-Path -Path "package-lock.json")) {
            npm install
          } else {
            npm ci
          }
          npx playwright install --with-deps

      - name: Run all tests (no tag specified)
        if: ${{ github.event.inputs.tags == '' || github.event_name != 'workflow_dispatch' }}
        shell: pwsh
        run: |
          npx cucumber-js --format html:reports/cucumber-report.html --format json:reports/cucumber-report.json
          $exitCode = $LASTEXITCODE
          npm run report
          exit $exitCode
        env:
          CI: true
          TEST_ENV: ${{ env.TEST_ENV }}

      - name: Run tests with specific tag
        if: ${{ github.event.inputs.tags != '' && github.event_name == 'workflow_dispatch' }}
        shell: pwsh
        run: |
          npx cucumber-js --tags "@${{ github.event.inputs.tags }}" --parallel 4 --format html:reports/cucumber-report.html --format json:reports/cucumber-report.json
          $exitCode = $LASTEXITCODE
          npm run report
          exit $exitCode
        env:
          CI: true
          TEST_ENV: ${{ env.TEST_ENV }}

      - name: Generate Test Summary Report
        if: always()
        shell: pwsh
        run: |
          if (Test-Path -Path "reports/cucumber-report.json") {
            node generate-summary.js
          } else {
            Write-Host "Warning: reports/cucumber-report.json not found. Skipping summary generation."
          }

      - name: Report Location Information
        if: always()
        shell: pwsh
        run: |
          Write-Host "\n============================================="
          Write-Host "TEST REPORT LOCATIONS:"
          Write-Host "============================================="
          Write-Host "HTML Report: $PWD/test-reports/index.html"
          Write-Host "JSON Report: $PWD/reports/cucumber-report.json"
          Write-Host "=============================================\n"

          @"
          TEST REPORT LOCATIONS:
          =============================================
          HTML Report: $PWD/test-reports/index.html
          JSON Report: $PWD/reports/cucumber-report.json
          =============================================
          "@ | Out-File -FilePath "report-locations.txt"

      - name: Debug - List report files
        shell: pwsh
        run: |
          Write-Host "Listing all files in reports/"
          Get-ChildItem -Recurse reports

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_id }}-${{ env.TEST_ENV }}
          path: |
            reports/**
            test-reports/**
            cucumber-report.html
            cucumber-report.json
          retention-days: 30
          if-no-files-found: warn

      - name: Upload report locations
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: report-locations-${{ github.run_id }}-${{ env.TEST_ENV }}
          path: report-locations.txt
          retention-days: 30
          if-no-files-found: ignore

      - name: Upload Playwright traces on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces-${{ github.run_id }}-${{ env.TEST_ENV }}
          path: |
            reports/traces/
            reports/screenshots/
          retention-days: 30
          if-no-files-found: ignore

      # - name: Send success Slack notification
      #   if: success()
      #   shell: pwsh
      #   run: |
      #     node helpers/postBuildStatus.js "success" "0"
      #   env:
      #     SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
      #     SLACK_CHANNEL_ID: "CGJFM3XCM"

      # - name: Send failure Slack notification
      #   if: failure()
      #   shell: pwsh
      #   run: |
      #     node helpers/postBuildStatus.js "failure" "0"
      #   env:
      #     SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
      #     FAILURE_SLACK_CHANNEL_ID: "CGJFM3XCM"
