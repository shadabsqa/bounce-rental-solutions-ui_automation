import fs from "fs";

try {
  const report = JSON.parse(fs.readFileSync("./reports/cucumber-report.json", "utf-8"));

  let scenariosPassed = 0, scenariosFailed = 0;
  let stepsPassed = 0, stepsFailed = 0, stepsSkipped = 0;
  let totalDuration = 0;

  report.forEach(feature => {
    feature.elements?.forEach(scenario => {
      let failed = false;
      scenario.steps?.forEach(step => {
        const status = step.result?.status;
        const duration = step.result?.duration || 0; // assumed to be in seconds
        totalDuration += duration;

        if (status === "passed") stepsPassed++;
        else if (status === "failed") {
          stepsFailed++;
          failed = true;
        } else if (status === "skipped") stepsSkipped++;
      });
      failed ? scenariosFailed++ : scenariosPassed++;
    });
  });

  // Round total duration (already in seconds)
  const durationInSeconds = (totalDuration / 1_000_000_000).toFixed(2);

  const summary = `

**Scenarios:**  
üü© ${scenariosPassed} passed  
üü• ${scenariosFailed} failed  

**Steps:**  
üü© ${stepsPassed} passed  
üü• ${stepsFailed} failed  
üüß ${stepsSkipped} skipped  

**‚è± Total Step Duration:** ${durationInSeconds} seconds  
üìå _Note: This is the sum of step durations (may exceed actual wall-clock time in parallel tests)._
`;

   // Display detailed failure information
  if (failureDetails.length > 0) {
    console.log("\n================ Detailed Failure Analysis ================\n");
    
    failureDetails.forEach((scenario, index) => {
      console.log(`üî• FAILURE ${index + 1}: ${scenario.scenarioName}`);
      console.log(`üìÇ Feature: ${scenario.featureName}`);
      console.log(`üìç Line: ${scenario.line}`);
      if (scenario.tags) console.log(`üè∑Ô∏è  Tags: ${scenario.tags}`);
      
      scenario.failures.forEach((failure, failIndex) => {
        console.log(`\n   Step ${failIndex + 1}: "${failure.stepName}" (Line ${failure.line})`);
        
        if (failure.locator) {
          console.log(`   üéØ Locator: ${failure.locator}`);
        }
        
        if (failure.expected && failure.received) {
          console.log(`   ‚úÖ Expected: ${failure.expected}`);
          console.log(`   ‚ùå Received: ${failure.received}`);
        }
        
        
        if (failure.errorMessage) {
          console.log(`   üìù Error Details:`);
          // Split long error messages for better readability
          const errorLines = failure.errorMessage.split('\n');
          errorLines.forEach(line => {
            if (line.trim()) {
              console.log(`      ${line.trim()}`);
            }
          });
        }
      });
      
      console.log("\n" + "‚îÄ".repeat(60));
    });
  }

  if (process.env.GITHUB_STEP_SUMMARY) {
    fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, summary);
    console.log("‚úÖ Test summary added to GitHub step summary");
  } else {
    console.log("‚úÖ Test Summary:");
    console.log(summary);
  }
} catch (error) {
  console.error("‚ùå Error generating test summary:", error.message);
  process.exit(1);
}
